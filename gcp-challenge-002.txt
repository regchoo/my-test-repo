Getting Started: Create and Manage Cloud Resources: Challenge Lab

VM-INSTANCE:create
==================
use Cloud Console instead of Cloud Shell

# using cloud shell didnt work for me
gcloud compute instances create nucleus-jumphost \
	--machine-type=f1-micro \
	--image-family=debian-10 \
	--image-project=debian-cloud \
	--zone=us-east1-b

---------------------------------------------------------------------------

GKE:create
==========

gcloud config set compute/zone us-east1-b

gcloud container clusters create challenge-cluster

gcloud container clusters get-credentials challenge-cluster

kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment hello-server --type=LoadBalancer --port 8080

------------------------------------------------------------------------

LB:create-nginx-pool
====================

gcloud config set compute/region us-east1
gcloud config set compute/zone us-east1-b

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

# create template
gcloud compute instance-templates create nginx-template \
	--region=us-east1 \
	--network=default \
	--subnet=default \
	--image-family=debian-9 \
	--image-project=debian-cloud \
	--metadata-from-file startup-script=startup.sh

# create target-pool
gcloud compute target-pools create nginx-pool

# create instance group based on template
gcloud compute instance-groups managed create nginx-group \
	--base-instance-name=nginx \
	--size=2 \
	--template=nginx-template \
	--zone=us-east1-b \
	--target-pool=nginx-pool
	
##### gcloud compute target-pools add-instances nginx-pool --instances INSTANCE1,INSTANCE2 ....
		 
# check for all instances should see 6 instances in total
gloud compute instances list

# create firewall rule to open port 80 for web access
gcloud compute firewall-rules create www-firewall --allow tcp:80

# create a health check
gcloud compute http-health-checks create http-basic-check

# create a backend-service named "nginx-backend"
gcloud compute backend-services create nginx-backend \
	--protocol=HTTP \
	--http-health-checks=http-basic-check \
	--global

# add "nginx-group" to the backend-service "nginx-backend"
gcloud compute backend-services add-backend nginx-backend \
	--instance-group=nginx-group \
	--instance-group-zone=us-east1-b \
	--global

# create a url-maps "web-map" for backend-service "nginx-backend" 
gcloud compute url-maps create web-map --default-service=nginx-backend
gcloud compute target-http-proxies create http-lb-proxy --url-map web-map

# set-named-ports on http:80 for nginx-gropu
gcloud compute instance-groups managed set-named-ports nginx-group \
	--named-ports=http:80 \
	--region=us-east1

# create forwarding rule for target-pool
gcloud compute forwarding-rules create nginx-lb \
	--region us-east1 \
	--ports=80 \
	--target-pool nginx-pool

# create forwarding rule for backend-service
gcloud compute forwarding-rules create http-content-rule \
	--global \
	--target-http-proxy=http-lb-proxy \
	--ports 80


gcloud compute forwarding-rules list

==========================================================================

gcloud compute firewall-rules create fw-allow-health-check \
    --network=default \
    --action=allow \
    --direction=ingress \
    --source-ranges=130.211.0.0/22,35.191.0.0/16 \
    --target-tags=allow-health-check \
    --rules=tcp:80 \
    --description="Firewall rule to allow health checks"










=============================================================================================
You need to:
Create an instance template.
Create a target pool.
Create a managed instance group.
Create a firewall rule to allow traffic (80/tcp)
Create a firewall rule to allow health-checks from 130.211.0.0/22,35.191.0.0/16
Create a health check.
Create a backend service, and attach the managed instance group.
Create a URL map, and target the HTTP proxy to route requests to your URL map.
Create a forwarding rule.
